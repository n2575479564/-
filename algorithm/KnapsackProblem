/**
 * @author 王木风
 * @create 2020-08-23 14:34
 */
public class KnapsackProblem {
    public static void main(String[] args) {
        int[] w = {1, 4, 3};//物品重量
        int[] val = {1500, 3000, 2000};//物品重量
        int m = 4;//背包容量
        int n = val.length;
        //前i个物品中能装入容量为j的背包的最大价值
        int[][] v = new int[n + 1][m + 1];
        //记录商品放入情况
        int[][] path = new int[n + 1][m + 1];

        for (int i = 1; i < v.length; i++) {//不处理第一行
            for (int j = 1; j < v[0].length; j++) {//不处理第一列
                if (w[i - 1] > j) {//因为i从1开始，导致w数组也从1开始，需要-1
                    v[i][j] = v[i - 1][j];
                } else {
                    //v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);
                    //为了记录路径，不能简单使用上面式子
                    if (v[i - 1][j] < val[i - 1] + v[i - 1][j - w[i - 1]]) {
                        v[i][j] = val[i - 1] + v[i - 1][j - w[i - 1]];
                        path[i][j] = 1;
                    } else {
                        v[i][j] = v[i - 1][j];
                    }
                }
            }
        }
        for (int i = 0; i < v.length; i++) {
            for (int j = 0; j < v[i].length; j++) {
                System.out.print(v[i][j]+" ");
            }
            System.out.println();
        }
        //输出放入了那些商品
        System.out.println("============");
        for (int i = 0; i < path.length; i++) {
            for (int j = 0; j < path[i].length; j++) {
                if (path[i][j] == 1) {
                    System.out.println("第"+i+"个商品放入背包");
                }

            }
        }
    }
}
